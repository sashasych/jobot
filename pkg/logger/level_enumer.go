// Code generated by "enumer -type Level -text -transform=lower"; DO NOT EDIT.

package logger

import (
	"fmt"
	"strings"
)

const _LevelName = "debuginfowarnerrorpanicfataldpanic"

var _LevelIndex = [...]uint8{0, 5, 9, 13, 18, 23, 28, 34}

const _LevelLowerName = "debuginfowarnerrorpanicfataldpanic"

func (i Level) String() string {
	if i >= Level(len(_LevelIndex)-1) {
		return fmt.Sprintf("Level(%d)", i)
	}
	return _LevelName[_LevelIndex[i]:_LevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LevelNoOp() {
	var x [1]struct{}
	_ = x[Debug-(0)]
	_ = x[Info-(1)]
	_ = x[Warn-(2)]
	_ = x[Error-(3)]
	_ = x[Panic-(4)]
	_ = x[Fatal-(5)]
	_ = x[DPanic-(6)]
}

var _LevelValues = []Level{Debug, Info, Warn, Error, Panic, Fatal, DPanic}

var _LevelNameToValueMap = map[string]Level{
	_LevelName[0:5]:        Debug,
	_LevelLowerName[0:5]:   Debug,
	_LevelName[5:9]:        Info,
	_LevelLowerName[5:9]:   Info,
	_LevelName[9:13]:       Warn,
	_LevelLowerName[9:13]:  Warn,
	_LevelName[13:18]:      Error,
	_LevelLowerName[13:18]: Error,
	_LevelName[18:23]:      Panic,
	_LevelLowerName[18:23]: Panic,
	_LevelName[23:28]:      Fatal,
	_LevelLowerName[23:28]: Fatal,
	_LevelName[28:34]:      DPanic,
	_LevelLowerName[28:34]: DPanic,
}

var _LevelNames = []string{
	_LevelName[0:5],
	_LevelName[5:9],
	_LevelName[9:13],
	_LevelName[13:18],
	_LevelName[18:23],
	_LevelName[23:28],
	_LevelName[28:34],
}

// LevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LevelString(s string) (Level, error) {
	if val, ok := _LevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Level values", s)
}

// LevelValues returns all values of the enum
func LevelValues() []Level {
	return _LevelValues
}

// LevelStrings returns a slice of all String values of the enum
func LevelStrings() []string {
	strs := make([]string, len(_LevelNames))
	copy(strs, _LevelNames)
	return strs
}

// IsALevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Level) IsALevel() bool {
	for _, v := range _LevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Level
func (i Level) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Level
func (i *Level) UnmarshalText(text []byte) error {
	var err error
	*i, err = LevelString(string(text))
	return err
}
